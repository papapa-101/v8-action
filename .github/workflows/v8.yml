name: BUILD and Complie v8

on:
  push:
    branches: [ master ]

env:
  PATCH_FLAG: false #给v8打上patch，不需要则false
  COMMIT: 6dc88c191f5ecc5389dc26efa3ca0907faef3598 #v8对应的版本号
  SRC_UPLOAD: false
  BINARY_UPLOAD: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id  
    
    steps:
    - name: Checkout
      uses: actions/checkout@master
      
    # init ubuntu20.04 environment
    - name: init env 
      run: |
        sudo apt-get update
        sudo apt-get -y install pkg-config git subversion curl wget build-essential xz-utils zip p7zip-full python
        curl -fsSL git.io/file-transfer | sh
        ls -l
        
    # get depot_tools
    - name: depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo export PATH=\"\$PATH:`pwd`/depot_tools/\" >> ~/.bash_profile
    
    # fetch v8 source code
    - name: fetch v8
      run: |
        source ~/.bash_profile
        fetch v8
        cd v8
        git reset --hard $COMMIT
        cd ..
    
    # patch source code
    - name: patch v8
      if: env.PATCH_FLAG == 'true' && !cancelled()
      run: | # git clone https://github.com/Archerber/tmp_patch.git下载patch内容
        cd v8
        # git apply ../tmp_patch/*.patch #根据diff文件修改源码 diff function
        cat ${GITHUB_WORKSPACE}/oob.diff
        git apply ${GITHUB_WORKSPACE}/oob.diff
        cd ..
    
    - name: setting ninja
      run: |
        sudo apt-get install libtool autoconf
        git clone https://github.com/skvadrik/re2c.git re2c
        cd re2c
        mkdir -p m4
        ./autogen.sh && ./configure --prefix=/usr && make
        sudo make install
        re2c -v
        cd ..
        git clone https://github.com/ninja-build/ninja.git
        cd ninja && ./configure.py --bootstrap && cd ..
        echo export PATH=\"\$PATH:`pwd`/ninja/\" >> ~/.bash_profile
    
    - name: Complie v8
      run: |
        source ~/.bash_profile
        gclient sync -D
        cd v8
        ls -l
        tools/dev/v8gen.py x64.debug
        ninja -C out.gn/x64.debug d8
        tools/dev/v8gen.py x64.release
        gn gen out/x64.release --args='v8_monolithic=true v8_use_external_startup_data=false is_component_build=false is_debug=true target_cpu="x64" use_goma=false goma_dir="None" v8_enable_backtrace=true v8_enable_disassembler=true v8_enable_object_print=true v8_enable_verify_heap=true'
        ninja -C out/x64.release d8
        
    # 7zip d8
    - name: 7zip d8
      if: env.BINARY_UPLOAD == 'true' && !cancelled()
      run: |
        # zip d8.zip v8/out/x64.release/d8
        ls -l
        ./transfer wss v8/out/x64.release/d8
        ./transfer wss v8/out/x64.debug/d8
        # ./transfer wss d8.zip

    - name: save src
      if: env.SRC_UPLOAD == 'true' && !cancelled()
      run: |
        zip -q -r v8.zip v8
        ./transfer wss v8.zip
